
# config
SIGMA_CUTOFF = config.get('sigma_cutoff', 500)
MFRAC_CUTOFF = config.get('mfrac_cutoff', 85)

def get_pre_filtered_subclusters(group, cluster):
    wildcards = dict(output_dir=WORK_DIR,
                     group=group,
                     cluster=cluster)
    reads_dir = checkpoints.choose_subclusters.get(**wildcards).output.fasta_dir

    subclusters, = glob_wildcards(reads_dir + "/subcluster.{subcluster}.fasta")
    return subclusters

checkpoint choose_subclusters:
    """
    Go through mcl file. For each cluster:
      * find reads in window fasta files
      * check length distribution
      * if it passes, write out fasta file
    """
    input:
        fasta='{output_dir}/mcl_all/reads/group.{group}/cluster.{cluster}.fasta',
        lastal='{output_dir}/refine_lastal/group.{group}/cluster.{cluster}/cluster.{cluster}.self.m8',
        agg='{output_dir}/refine_lastal/group.{group}/cluster.{cluster}/cluster.{cluster}.self.m8.agg',
        mcl=f'{{output_dir}}/refine_lastal/group.{{group}}/cluster.{{cluster}}/cluster.{{cluster}}.self.m8.gt{MFRAC_CUTOFF}.I{MCL_I}.mcl',
        faa='{output_dir}/mcl_all/reads/group.{group}/cluster.{cluster}.faa',
        domtbl='{output_dir}/mcl_all/reads/group.{group}/cluster.{cluster}.faa.pfam.tbl.U',
    output:
        fasta_dir=directory('{output_dir}/refine_lastal/group.{group}/cluster.{cluster}/subclusters/reads'),
        stats='{output_dir}/refine_lastal/group.{group}/cluster.{cluster}/subclusters/cluster_stats.tsv',
        hist_pdf='{output_dir}/refine_lastal/group.{group}/cluster.{cluster}/subclusters/cluster_hists.pdf',
        gene_pdf='{output_dir}/refine_lastal/group.{group}/cluster.{cluster}/subclusters/cluster_synteny.pdf',
    params:
        sigma_cutoff=SIGMA_CUTOFF,
        min_sub_size=MIN_POL_READS + 1,
        max_colored_genes=8,
        gene_cmap='gnuplot2',
        max_synteny_reads=15,
        read_cmap='cool'
    script: '../scripts/choose_subclusters.py'

rule unique_pfam:
    input:
        domtbl='{prefix}/{name}.faa.pfam.tbl',
    output:
        domtblU='{prefix}/{name}.faa.pfam.tbl.U',
    shell:
        "filter_blast_m8.py -f hmmsearchdom {input.domtbl} -U -s score  > {output.domtblU}"

if 'pfam_hmm_path' in config:
    rule genes_pfam:
        input:
            faa='{prefix}/{name}.faa',
            hmm=config['pfam_hmm_path']
        output: 
            domtbl='{prefix}/{name}.faa.pfam.tbl',
        threads: 5
        shell: "hmmsearch --cpu {threads} --domtblout {output.domtbl} {input.hmm} {input.faa} > /dev/null"
else:
    rule genes_dummy_annot:
        output: 
            domtbl=touch('{prefix}/{name}.faa.pfam.tbl')

rule prodigal:
    input: '{prefix}/{name}.fasta',
    output:
        faa='{prefix}/{name}.faa',
        gff='{prefix}/{name}.gff',
    shell: 'prodigal -a {output.faa} -f gff -o {output.gff} -p meta -i {input} > {output.gff}.log 2>&1'
