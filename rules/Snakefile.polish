
cluster_id = '168'
sub_cluster = 2
short_reads = '/mnt/delong/scratch2/jmeppley/nanopore_biller/illumina/QC/HSD00-20a-319-25m-LV-Tailed-Phage.clean.fastq'
cluster_mcl_template = 'spike_search/refine_lastal/cluster.{cluster_id}/cluster.{cluster_id}.self.m8.I5.0.mcl'
cluster_reads_template = 'spike_search/mcl_all/reads/cluster.{cluster_id}.fasta'
pctid_cutoff = '90'

rule compare_genes:
    input:
        raw_reads='cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.faa',
        polished='cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.v.sr.gt{pctid_cutoff}.pilon.faa'
    output: 'cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.raw.v.polished.gt{pctid_cutoff}.genes.tsv'
    run:
        from Bio import SeqIO
        import numpy, pandas
        data = []
        names = []
        for name, faa_file in input.items():
            lengths = []
            for gene in SeqIO.parse(faa_file, 'fasta'):
                _, start, end, _ = gene.description.split("#", 3)
                lengths.append(int(end) - int(start))
            lengths = numpy.array(lengths)
            data.append(dict(mean=lengths.mean(),
                             max=lengths.max(),
                             min=lengths.min(),
                             median=numpy.median(lengths),
                             num=len(lengths),
                             total=lengths.sum()
                            ))
            names.append(name)
        stats = pandas.DataFrame(data, index=names)
        stats.sort_index().to_csv(str(output), sep='\t')            
        
rule prodigal:
    input: '{prefix}/{name}.fasta',
    output:
        faa='{prefix}/{name}.faa',
        gff='{prefix}/{name}.gff',
    shell: 'prodigal -a {output.faa} -f gff -o {output.gff} -p meta -i {input}'
    
rule pilon_fasta:
    input: '{prefix}_pilon/pilon.fasta'
    output: '{prefix}.pilon.fasta'
    params:
        rel_path=lambda w: w.prefix.split('/')[-1] + "_pilon/pilon.fasta"
    shell: 'ln -s {params.rel_path} {output}'

rule pilon:
    input: 
        fasta='cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.fasta',
        indexed_bam='cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.v.sr.gt{pctid_cutoff}.bam.bai'
    output: 'cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.v.sr.gt{pctid_cutoff}_pilon/pilon.fasta'
    threads: 20
    params:
        indexed_bam='cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.v.sr.gt{pctid_cutoff}.bam',
        out_dir="cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.v.sr.gt{pctid_cutoff}_pilon"
    shell: "pilon --genome {input.fasta} \
                  --bam {params.indexed_bam} \
                   --fix bases --outdir {params.out_dir} \
                   --threads {threads} --verbose -Xmx20g \
                > {params.out_dir}.log \
               2> {params.out_dir}.err"
        
rule index_bam:
    input: '{prefix}.bam'
    output: '{prefix}.bam.bai'
    shell: 'samtools index {input}'

rule bwa_mem:
    input:
        fastq='cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.v.sr.gt{pctid_cutoff}.fastq',
        idx='cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.bwt'
    output: 'cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.v.sr.gt{pctid_cutoff}.bam'
    params:
        db_name='cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads'
    threads: 20
    shell: 'bwa mem -p -t {threads} {params.db_name} {input.fastq} \
             | samtools view -b - \
             | samtools sort -l 5 -@ 5 -m 10G - \
             > {output} 2> {output}.log'
        
rule bwa_index:
    input: '{name}.fasta'
    output: '{name}.bwt'
    log: '{name}.index.log'
    shell: 'bwa index -p {wildcards.name} {input}'

"""
rule minimap_bam:
    input:
        sr='cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.v.sr.gt{pctid_cutoff}.fastq',
        sc_reads='cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.fasta'
    output: 'cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.v.sr.gt{pctid_cutoff}.bam'
    threads: 20
    shell:
        "minimap2 -t threads -x sr -a -o {output} {input.sc_reads} {input.sr} \
             | samtools view -F 2308 -b - \
             | samtools sort -l 5 -@ 5 -m 10G - \
             > {output} 2> {output}.log"
"""

rule short_read_fasta_filter:
    input: 
        list='cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.v.sr.gt{pctid_cutoff}.reads',
        sr=short_reads
    output: 'cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.v.sr.gt{pctid_cutoff}.fastq'
    run:
        with open(str(input.list)) as read_lines:
            reads = set(l.strip() for l in read_lines)
            
        from Bio import SeqIO
        with open(str(output), 'wt') as reads_out:
            for read in SeqIO.parse(str(input.sr), 'fastq'):
                if read.id in reads:
                    reads_out.write(read.format('fastq'))

rule short_read_list:
    input: 'cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.v.sr.paf'
    output: 'cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.v.sr.gt{pctid_cutoff}.reads'
    run:
        from jme.jupy_tools.utils import parse_blast_m8, PAF
        hits = parse_blast_m8(str(input), format=PAF).query(f'pctid >= {wildcards.pctid_cutoff}')
        with open(str(output), 'wt') as reads_out:
            reads_out.write("\n".join(set(hits['query'])) + "\n")

rule minimap_paf:
    input:
        sr=short_reads,
        sc_reads='cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.fasta'
    output: 'cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.v.sr.paf'
    threads: 20
    shell:
        "minimap2 -t threads -x sr -o {output} {input.sc_reads} {input.sr}"
        
rule sub_cluster_fasta:
    input:
        list="cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.list",
        fasta=cluster_reads_template
    output: "cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.fasta"
    shell: 'screen_list.py -k -l {input.list} {input.fasta} > {output}'
    
rule sub_cluster_read_list:
    input: cluster_mcl_template
    output: "cluster_check/cluster.{cluster_id}/sub.{sub_cluster}/reads.list"
    shell: "head -n {wildcards.sub_cluster} {input} | tail -n 1 > {output}"
